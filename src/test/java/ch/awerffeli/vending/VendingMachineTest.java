package ch.awerffeli.vending;/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import ch.awerffeli.vending.exception.CoinsExchangeNotPossibleException;
import ch.awerffeli.vending.exception.NotEnoughCreditException;
import ch.awerffeli.vending.exception.SoldOutException;
import org.junit.Before;
import org.junit.Test;

import java.util.*;

import static ch.awerffeli.vending.CoinValue.*;
import static ch.awerffeli.vending.CoinValue.EURO_1;
import static ch.awerffeli.vending.CoinValue.EURO_2;
import static org.junit.Assert.*;
import static org.junit.Assert.assertSame;

public class VendingMachineTest {

    MachineInterface vendingMachine;

    @Before
    public void setup() {
        vendingMachine = new VendingMachine();
    }

    @Test
    public void testInsertAndRefundCoins() {
        vendingMachine = new VendingMachine();

        List<Coin> coinsInWallet = new ArrayList();

        coinsInWallet.add(new Coin(CENT_1));
        coinsInWallet.add(new Coin(CENT_1));
        coinsInWallet.add(new Coin(CENT_50));
        coinsInWallet.add(new Coin(EURO_1));
        coinsInWallet.add(new Coin(EURO_2));
        //total = 3.52

        vendingMachine.insertCoins(coinsInWallet);
        Map<Coin, Integer> userCoinsInMachine = vendingMachine.refundBalance();

        assertSame(null, userCoinsInMachine.get(new Coin(CENT_1)));
        assertSame(1, userCoinsInMachine.get(new Coin(CENT_2)));
        assertSame(1, userCoinsInMachine.get(new Coin(CENT_50)));
        assertSame(1, userCoinsInMachine.get(new Coin(EURO_1)));
        assertSame(1, userCoinsInMachine.get(new Coin(EURO_2)));

        //after refunding no money of the user should be left in the machine
        userCoinsInMachine = vendingMachine.refundBalance();
        assertSame(null, userCoinsInMachine.get(new Coin(CENT_1)));
        assertSame(null, userCoinsInMachine.get(new Coin(CENT_2)));
        assertSame(null, userCoinsInMachine.get(new Coin(CENT_50)));
        assertSame(null, userCoinsInMachine.get(new Coin(CENT_1)));
        assertSame(null, userCoinsInMachine.get(new Coin(EURO_2)));
    }

    @Test
    public void testGetAvailableCoins() {

        final HashMap<Coin, Integer> availableCoinsBefore = vendingMachine.getAvailableCoins();

        assertSame(1, availableCoinsBefore.get(new Coin(CENT_1)));
        assertSame(2, availableCoinsBefore.get(new Coin(CENT_2)));
        assertSame(5, availableCoinsBefore.get(new Coin(CENT_5)));
        assertSame(5, availableCoinsBefore.get(new Coin(EURO_1)));

        //add some coins and check test again
        List<Coin> coinsInWallet = new ArrayList();
        coinsInWallet.add(new Coin(CENT_1));
        coinsInWallet.add(new Coin(CENT_2));
        coinsInWallet.add(new Coin(CENT_2));
        vendingMachine.insertCoins(coinsInWallet);

        final HashMap<Coin, Integer> availableCoinsAfter = vendingMachine.getAvailableCoins();

        assertSame(2, availableCoinsAfter.get(new Coin(CENT_1)));
        assertSame(4, availableCoinsAfter.get(new Coin(CENT_2)));
        assertSame(5, availableCoinsAfter.get(new Coin(CENT_5)));
        assertSame(5, availableCoinsAfter.get(new Coin(EURO_1)));

    }

    @Test(expected = NotEnoughCreditException.class)
    public void testNotEnoughCredit() {

        final ArrayList<Item> itemList = new ArrayList<>(vendingMachine.getItemList());

        assertSame("BTC", itemList.get(0).getName());
        assertSame(4, itemList.get(0).getQuantity());

        vendingMachine.purchaseItem("BTC");
    }

    @Test
    public void testPurchaseAndGetItemListAndRefund() {

        VendingMachine vendingMachine = new VendingMachine();

        List<Coin> coinsInWallet = new ArrayList();

        coinsInWallet.add(new Coin(CENT_1));
        coinsInWallet.add(new Coin(CENT_1));
        coinsInWallet.add(new Coin(CENT_50));
        coinsInWallet.add(new Coin(EURO_1));
        coinsInWallet.add(new Coin(EURO_2));
        //total = 3.52

        vendingMachine.insertCoins(coinsInWallet);

        final ArrayList<Item> itemList = new ArrayList<>(vendingMachine.getItemList());

        assertSame("BTC", itemList.get(0).getName());
        assertSame(4, itemList.get(0).getQuantity());

        //costs 2.00
        assertTrue(vendingMachine.purchaseItem("BTC"));

        assertSame(3, itemList.get(0).getQuantity());

        final Map<Coin, Integer> availableCoinsAfter = vendingMachine.refundBalance();

        assertSame(1, availableCoinsAfter.get(new Coin(CENT_50)));
        assertSame(1, availableCoinsAfter.get(new Coin(CENT_2)));
        assertSame(1, availableCoinsAfter.get(new Coin(EURO_1)));
        //total = 1.52
    }

    @Test(expected = CoinsExchangeNotPossibleException.class)
    public void testCoinExchangeNotPossible() {
        List<Coin> coinsInWallet = new ArrayList();
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        vendingMachine.insertCoins(coinsInWallet);

        vendingMachine.purchaseItem("XLM");
        vendingMachine.purchaseItem("XLM");
        vendingMachine.purchaseItem("XLM");
    }

    @Test(expected = SoldOutException.class)
    public void testCoinExchangeIsPossible() {
        List<Coin> coinsInWallet = new ArrayList();
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        coinsInWallet.add(new Coin(EURO_2));
        vendingMachine.insertCoins(coinsInWallet);

        vendingMachine.purchaseItem("XES");
        vendingMachine.purchaseItem("XES");
        vendingMachine.purchaseItem("XES");
        vendingMachine.purchaseItem("XES");
        vendingMachine.purchaseItem("XES");
        vendingMachine.purchaseItem("XES");
    }

}
